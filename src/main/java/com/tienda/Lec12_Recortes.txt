****************
Recorte -001: UsuarioService.java
****************

import com.tienda.dao.UsuarioDao;
import com.tienda.domain.Rol;
import com.tienda.domain.Usuario;
import java.util.ArrayList;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.*;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service("userDetailsService")
public class UsuarioService implements UserDetailsService{
    @Autowired
    private UsuarioDao usuarioDao;
    
    @Override
    @Transactional(readOnly=true)
    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
        //Busca el usuario por el username en la tabla
        Usuario usuario = usuarioDao.findByUsername(username);
        
        //Si no existe el usuario lanza una excepción
        if(usuario == null){
            throw new UsernameNotFoundException(username);
        }
        
        //Si está acá es porque existe el usuario... sacamos los roles que tiene
        var roles = new ArrayList<GrantedAuthority>();
        
        for(Rol rol: usuario.getRoles()){   //Se sacan los roles
            roles.add(new SimpleGrantedAuthority(rol.getNombre()));
        }
        //Se devuelve User (clase de userDetails)
        return new User(usuario.getUsername(), usuario.getPassword(), roles);
    }    
}



****************
Recorte 000: SecurityConfig.Java  se pone en comentario el método users()
****************


@Autowired
    private UserDetailsService userDetailsService;

    @Autowired
    public void configurerGlobal(AuthenticationManagerBuilder build) throws Exception {
        build.userDetailsService(userDetailsService).passwordEncoder(new BCryptPasswordEncoder());
    }



****************
Recorte 001: Item.java
****************

import lombok.Data;

@Data
public class Item extends Articulo {
    private int cantidad; //Almacenar la cantidad de items de un articulo

    public Item() {
    }

    public Item(Articulo articulo) {
        super.setIdArticulo(articulo.getIdArticulo());
        super.setCategoria(articulo.getCategoria());
        super.setDescripcion(articulo.getDescripcion());
        super.setDetalle(articulo.getDetalle());
        super.setPrecio(articulo.getPrecio());
        super.setExistencias(articulo.getExistencias());
        super.setActivo(articulo.isActivo());
        super.setImagen(articulo.getImagen());
        this.cantidad = 0;
    }
}


****************
Recorte 002: ItemService.java
****************

import com.tienda.domain.Item;
import java.util.ArrayList;
import java.util.List;

public interface ItemService {     
    List<Item> listaItems = new ArrayList<>();
    
    public List<Item> gets();
    
    //Se recupera el registro que tiene el idItem pasado por parámetro
    //si no existe en la tabla se retorna null
    public Item get(Item item);
    
    //Se elimina el registro que tiene el idItem pasado por parámetro
    public void delete(Item item);
    
    //Si el objeto item tiene un idItem que existe en la tabla item
    //El registro de actualiza con la nueva información
    //Si el idItem NO existe en la tabla, se crea el registro con esa información
    public void save(Item item);
    
    public void actualiza(Item item);
    
    public void facturar();
}

****************
Recorte 003: ItemServiceImpl.java
****************

import com.tienda.domain.Item;
import com.tienda.service.ItemService;
import java.util.List;
import java.util.Objects;
import org.springframework.stereotype.Service;

@Service
public class ItemServiceImpl implements ItemService {

    @Override
    public List<Item> gets() {
        return listaItems;
    }

    //Se usa en el addCarrito... agrega un elemento
    @Override
    public void save(Item item) {
        boolean existe = false;
        for (Item i : listaItems) {
            //Busca si ya existe el articulo en el carrito
            if (Objects.equals(i.getIdArticulo(), item.getIdArticulo())) {
                //Valida si aún puede colocar un item adicional -segun existencias-
                if (i.getCantidad() < item.getExistencias()) {
                    //Incrementa en 1 la cantidad de elementos
                    i.setCantidad(i.getCantidad() + 1);
                }
                existe = true;
                break;
            }
        }
        if (!existe) {//Si no está el articulo en el carrito se agrega cantidad =1.            
            item.setCantidad(1);
            listaItems.add(item);
        }
    }

    //Se usa para eliminar un articulo del carrito
    @Override
    public void delete(Item item) {
        var posicion = -1;
        var existe = false;
        for (Item i : listaItems) {
            ++posicion;
            if (Objects.equals(i.getIdArticulo(), item.getIdArticulo())) {
                existe = true;
                break;
            }
        }
        if (existe) {
            listaItems.remove(posicion);
        }
    }

    //Se obtiene la información de un articulo del carrito... para modificarlo
    @Override
    public Item get(Item item) {
        for (Item i : listaItems) {
            if (Objects.equals(i.getIdArticulo(), item.getIdArticulo())) {
                return i;
            }
        }
        return null;
    }

    //Se usa en la página para actualizar la cantidad de articulos
    @Override
    public void actualiza(Item item) {
        for (Item i : listaItems) {
            if (Objects.equals(i.getIdArticulo(), item.getIdArticulo())) {
                i.setCantidad(item.getCantidad());
                break;
            }
        }
    }

    /*En un futuro sería el proceso de generar la facturación...
    por ahora sólo borra los elementos del carrito */
    @Override
    public void facturar() {
        System.out.println("Facturando");
        for (Item i : listaItems) {
            System.out.println("Producto: " + i.getDescripcion() + 
                    " Cantidad: " + i.getCantidad() + 
                    " Total: " + i.getPrecio() * i.getCantidad());

        }
        listaItems.clear();
    }
}


****************
Recorte 004: CarritoController.java
****************

import com.tienda.domain.Articulo;
import com.tienda.domain.Item;
import com.tienda.service.ArticuloService;
import com.tienda.service.ItemService;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.ModelAndView;

@Controller
@Slf4j
public class CarritoController {

    @Autowired
    private ItemService itemService;
    @Autowired
    private ArticuloService articuloService;

    //Para ver el carrito
    @GetMapping("/carrito/listado")
    public String inicio(Model model) {
        var items = itemService.gets();
        model.addAttribute("items", items);
        var carritoTotalVenta = 0;
        for (Item i : items) {
            carritoTotalVenta += (i.getCantidad() * i.getPrecio());
        }
        model.addAttribute("carritoTotal", carritoTotalVenta);
        return "/carrito/listado";
    }

    //Para Agregar un articulo al carrito
    @GetMapping("/carrito/agregar/{idArticulo}")
    public ModelAndView agregarItem(Model model, Item item) {
        Item item2 = itemService.get(item);
        if (item2 == null) {
            Articulo articulo = articuloService.getArticulo(item);
            item2 = new Item(articulo);
        }
        itemService.save(item2);
        var lista = itemService.gets();
        var totalCarritos = 0;
        var carritoTotalVenta = 0;
        for (Item i : lista) {
            totalCarritos += i.getCantidad();
            carritoTotalVenta += (i.getCantidad() * i.getPrecio());
        }
        model.addAttribute("listaItems", lista);
        model.addAttribute("listaTotal", totalCarritos);
        model.addAttribute("carritoTotal", carritoTotalVenta);
        return new ModelAndView("/carrito/fragmentosCarrito :: verCarrito");
    }

    //Para mofificar un articulo del carrito
    @GetMapping("/carrito/modificar/{idArticulo}")
    public String modificarItem(Item item, Model model) {
        item = itemService.get(item);
        model.addAttribute("item", item);
        return "/carrito/modificar";
    }

    //Para eliminar un elemento del carrito
    @GetMapping("/carrito/eliminar/{idArticulo}")
    public String eliminarItem(Item item) {
        itemService.delete(item);
        return "redirect:/carrito/listado";
    }

    //Para actualizar un articulo del carrito (cantidad)
    @PostMapping("/carrito/guardar")
    public String guardarItem(Item item) {
        itemService.actualiza(item);
        return "redirect:/carrito/listado";
    }
    
    //Para facturar los articulos del carrito... no implementado...
    @GetMapping("/facturar/carrito")
    public String facturarCarrito() {
        itemService.facturar();
        return "redirect:/";
    }
}

****************
Recorte 005: messages.properties
****************

plantilla.tusuario=Usuario
plantilla.troles=Roles
plantilla.usuarios=Usuarios
plantilla.bienvenido=Usuario
cliente.listado=Listado de Clientes
carrito.verCarrito=Ver Carrito
carrito.titulo=Productos en el Carrito
carrito.cantidad=Cantidad
carrito.total=Total
carrito.totalCompra=Total de Compra
carrito.seguirComprando=Seguir Comprando
carrito.facturar=Facturar
carrito.no_mostrar=Carrito Vácio!
carrito.cantidad=Cantidad
carrito.datos=Datos del Artículo


****************
Recorte 006: index.html
****************

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:sec="http://thymeleaf.org/extras/spring-security">
    <head th:replace="~{layout/plantilla :: head}">
        <title>TechShop</title>        
    </head>
    <body>
        <header th:replace="~{layout/plantilla :: header}"/>
        <section th:replace="~{carrito/fragmentosCarrito :: listadoArticulos}"/>
        <footer th:replace="~{layout/plantilla :: footer}"/>  

        <script>
            function addCard(formulario){             
            var valor=formulario.elements[0].value;                
            var url = '/carrito/agregar';
            url = url + '/' +valor;
            $("#resultsBlock").load(url);         
            }
        </script>
    </body>
</html>


****************
Recorte 007: fragmentosCarrito.html
****************

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:sec="http://thymeleaf.org/extras/spring-security">
    <head th:replace="~{layout/plantilla :: head}">
        <title>TechShop</title>
    </head>
    <body>
        <section th:fragment="listadoArticulos" id="articulos">
            <div class="container">
                <div class="row row-cols-2" >
                    <h2 class="inline">[[#{index.nuestrosArticulos}]]</h2>
                    <div id="resultsBlock">
                    </div>
                </div>
                <div class="row row-cols-3" 
                     th:if="${articulos != null and !articulos.empty}">
                    <div class="card" th:each="articulo : ${articulos}">
                        <div class="card-body">
                            <h5 class="card-title">[[${articulo.descripcion}]]</h5>
                            <figure>
                                <img th:src="@{${articulo.imagen}}" width="120"/>
                                <figcaption>
                                    [[${articulo.precio}+' ('+${articulo.existencias}+')']]
                                </figcaption>
                            </figure>
                            <form>
                                <input type="hidden" name="texto" th:value="${articulo.idArticulo}"/>
                                <input type="hidden" name="texto" th:value="${articulo.existencias}"/>
                                <button class="btn btn-ligth" id="addCar" 
                                        name="addCar" onclick="addCard(this.form)" 
                                        type="button">
                                    <i class="fas fa-cart-plus"></i>
                                </button>
                            </form>
                            <p class="card-text">[[${articulo.detalle}]]</p>                            
                        </div>
                    </div>
                </div>
                <div th:if="${articulos == null or articulos.empty}">
                    [[#{carrito.no_mostrar}]]
                </div>
            </div>
        </section>

        <div th:fragment="verCarrito" th:unless="${#lists.isEmpty(listaItems)}">            
            <form action="/carrito/listado">
                <button
                    type="submit"
                    class="btn btn-primary">
                    <i class="fas fa-cart-plus"></i>[[#{carrito.verCarrito}]] [[${listaTotal}]]
                </button>
            </form>
        </div>     

        <section th:fragment="listadoCarrito" id="items">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                        <div class="card">
                            <div class="card-header">
                                <h4>[[#{carrito.titulo}]]</h4>
                            </div>
                            <div th:if="${items != null and !items.empty}">
                                <table class="table table-stryped">
                                    <thead class="thead-dark">
                                        <tr>
                                            <th>#</th>
                                            <th>[[#{articulo.descripcion}]]</th>
                                            <th>[[#{articulo.precio}]]</th>
                                            <th>[[#{carrito.cantidad}]]</th>
                                            <th>[[#{carrito.total}]]</th>
                                            <th></th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr th:each="item, contador : ${items}">
                                            <td>[[${contador.count}]]</td>
                                            <td>[[${item.descripcion}]]</td>
                                            <td class="text-end">[[${item.precio}]]</td>
                                            <td class="text-center">[[${item.cantidad}]]</td>
                                            <td class="text-center">[[${item.cantidad*item.precio}]]</td>
                                            <td>
                                                <a th:href="@{/carrito/eliminar/}+${item.idArticulo}"
                                                   class="btn btn-danger">
                                                    <i class='fas fa-trash'></i> [[#{accion.eliminar}]]
                                                </a>
                                            </td>
                                            <td>
                                                <a th:href="@{/carrito/modificar/}+${item.idArticulo}"
                                                   class="btn btn-success">
                                                    <i class='fas fa-pencil'></i> [[#{accion.actualizar}]]
                                                </a>
                                            </td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                            <div class="text-center p-2" th:if="${items== null or items.empty}">
                                [[#{carrito.no_mostrar}]]
                            </div>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="card text-center bg-primary text-white mb-3">
                            <div class="card-body">
                                <h3>[[#{carrito.totalCompra}]]</h3>
                                <h4 class="fs-4">
                                    [[${carritoTotal}]]
                                </h4>
                            </div>
                        </div>
                        <div class="card text-center bg-success text-white mb-3">
                            <div class="card-body">
                                <a th:href="@{/}"
                                   class="btn btn-success">
                                    <i class='fas fa-reply'></i> [[#{carrito.seguirComprando}]]
                                </a>
                            </div>
                        </div>
                        <div class="card text-center bg-info text-white mb-3">
                            <div class="card-body">
                                <a th:href="@{/facturar/carrito}"
                                   class="btn btn-info">
                                    <i class='fas fa-fordward'></i> [[#{carrito.facturar}]]
                                </a>
                            </div>
                        </div> 
                    </div>
                </div>
            </div>
        </section>
    </body>
</html>

****************
Recorte 008: listado.html (en templates.carrito)
****************

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:sec="http://thymeleaf.org/extras/spring-security">
    <head th:replace="~{layout/plantilla :: head}">
        <title>TechShop</title>
    </head>
    <body>
        <header th:replace="~{layout/plantilla :: header}"/>

        <section th:replace="~{carrito/fragmentosCarrito :: listadoCarrito}"/>

        <footer th:replace="~{layout/plantilla :: footer}"/>

    </body>
</html>

****************
Recorte 009: modificar.html (en templates.carrito)
****************

<!DOCTYPE html>
<html xmlns:th="http://www.thymeleaf.org"
      xmlns="http://www.w3.org/1999/xhtml"
      xmlns:sec="http://thymeleaf.org/extras/spring-security">
    <head th:replace="~{layout/plantilla :: head}">
        <title>TechShop</title>
    </head>
    <body>
        <header th:replace="~{layout/plantilla :: header}"/>
        
        <div class="container">
            <div class="row row-cols-6" >
                <a th:href="@{/carrito/listado}" class="btn btn-primary">
                    <i class='fas fa-reply'></i> [[#{accion.regresar}]]</a>
            </div>
            <div class="row row-cols-2">
                <div class="card">
                    <div class="card-header">
                        [[#{carrito.datos}]]
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">[[${item.descripcion}]]</h5>
                        <h6 class="card-subtitle mb-2 text-muted text-end">
                            [[${item.precio}+' ('+${item.existencias}+')']]</h6>
                        <p class="card-text">[[${item.detalle}]]</p>
                    </div>
                </div>
                <div class="card">                    
                    <div class="card-body">
                        <figure>
                            <img th:src="@{${item.imagen}}" width="120"/>                            
                        </figure>
                        <form th:action="@{/carrito/guardar}"
                              method="post"
                              th:object="${item}">
                            <input type="hidden" name="idArticulo" th:field="*{idArticulo}"/>
                            <div class="form-group">
                                <label for="cantidad">[[#{carrito.cantidad}]]:</label>
                                <input type="number" name="cantidad" th:field="*{cantidad}" 
                                       min='1' th:max="${item.existencias}"/>
                            </div>                
                            <div class="form-group">                    
                                <button class="btn btn-success" type="submit" name="guardar">
                                   <i class='fas fa-save'></i> [[#{accion.guardar}]]
                                </button>
                            </div>
                        </form>
                        <a th:href="@{/carrito/eliminar/}+${item.idArticulo}"
                           class="btn btn-danger">
                            <i class='fas fa-trash'></i> [[#{accion.eliminar}]]
                        </a>
                    </div>
                </div>
            </div>
        </div>
        
        <footer th:replace="~{layout/plantilla :: footer}"/>

    </body>
</html>


****************
Recorte 010: Ademdum a SEcurityConfig
****************

 .requestMatchers("/facturar/carrito")
                .hasRole("USER")

